// Project-Type
apply plugin: "cpp"

model {
    repositories {
        libs(PrebuiltLibraries) {
            easyloggingpp {
                headers.srcDir "easyloggingpp/src"
            }
            gmp {
                headers.srcDir "gmp/include"
                binaries.withType(SharedLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    def baseDir = "gmp/lib"
                    if (os.windows) {
                        // Windows uses a .dll file, with a different link file if it exists (not Cygwin or MinGW)
                        sharedLibraryFile = file("${baseDir}/gmp.dll")
                        if (file("${baseDir}/util.lib").exists()) {
                            sharedLibraryLinkFile = file("${baseDir}/gmp.lib")
                        }
                    } else if (os.macOsX) {
                        sharedLibraryFile = file("${baseDir}/libgmp.dylib")
                    } else {
                        sharedLibraryFile = file("${baseDir}/libgmp.so")
                    }
                }
            }
            gmpxx {
                headers.srcDir "gmp/include"
                binaries.withType(SharedLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    def baseDir = "gmp/lib"
                    if (os.windows) {
                        // Windows uses a .dll file, with a different link file if it exists (not Cygwin or MinGW)
                        sharedLibraryFile = file("${baseDir}/gmp.dll")
                        if (file("${baseDir}/util.lib").exists()) {
                            sharedLibraryLinkFile = file("${baseDir}/gmp.lib")
                        }
                    } else if (os.macOsX) {
                        sharedLibraryFile = file("${baseDir}/libgmp.dylib")
                    } else {
                        sharedLibraryFile = file("${baseDir}/libgmp.so")
                    }
                }
            }
        }
    }

    components {
        primesieve(NativeLibrarySpec) {
            if(System.properties['sun.arch.data.model'] == "64") {
                targetPlatform "x64"
            } else {
                targetPlatform "x86"
            }

            sources.cpp {
                source {
                    srcDirs "primesieve/src"
                    include "*.cpp"
                }
                exportedHeaders {
                    srcDirs "primesieve/include"
                    include "**/*.hpp"
                }
            }
        }
    }
    
    binaries {
        withType(SharedLibraryBinarySpec) {
            buildable = false
        }
        withType(StaticLibraryBinarySpec) {
            if (toolChain in Gcc) {
                cppCompiler.args "-std=c++1y", "-w", "-Ofast", "-g0"
            }
            if (toolChain in Clang) {
                cppCompiler.args "-std=c++1y", "-w", "-Ofast", "-g0"
            }
            if (toolChain in VisualCpp) {
                cppCompiler.args "/std:c++14", "/W0", "/EHsc", "/O2"
            }
        }
    }
}
